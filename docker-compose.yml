version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: supplychain_postgres
    environment:
      POSTGRES_DB: supplychain
      POSTGRES_USER: supplychain_user
      POSTGRES_PASSWORD: supplychain_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supplychain_user -d supplychain"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - supplychain_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: supplychain_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - supplychain_network

  # Supply Chain API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: supplychain_api
    environment:
      # Database
      DATABASE_URL: postgresql://supplychain_user:supplychain_password@postgres:5432/supplychain
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Application
      DEBUG: "false"
      HOST: "0.0.0.0"
      PORT: "8000"
      SECRET_KEY: "your-production-secret-key-change-this"
      
      # API Keys (set these in .env file or environment)
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY:-}
      NEWS_API_KEY: ${NEWS_API_KEY:-}
      FLIGHTAWARE_API_KEY: ${FLIGHTAWARE_API_KEY:-}
      USGS_API_KEY: ${USGS_API_KEY:-}
      
      # Pipeline Settings
      PIPELINE_REFRESH_INTERVAL: "300"
      ALERT_THRESHOLD: "0.5"
      CRITICAL_THRESHOLD: "0.8"
      
      # External API Settings
      WEATHER_REFRESH_INTERVAL: "300"
      NEWS_REFRESH_INTERVAL: "600"
      EARTHQUAKE_REFRESH_INTERVAL: "180"
      
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - supplychain_network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: supplychain_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - supplychain_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  supplychain_network:
    driver: bridge 